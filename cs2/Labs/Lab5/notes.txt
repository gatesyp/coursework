1. Compiled ad ran the function successfully, printed out the address of each object created by the class. By using the command Regular_type a[3]; inside of the member function, it creates 3 different objejcts called 'a', and each time the object is constructed it outputs the addres of this newlycreated object. When deleting, it deletes in first-last fashion, so that the first object I created gets deleted last. 

2. It behaves exactly the same as before, just using different m emory addresses now for the objects created. 

3. I create a Pair object, which automatically makes 2 Regular_type objects. Then it accesses the member function, which makes two more Regular_type objects, and performs that operation twice so in total 4 objects were created and 2 Pair objects. When doing p2=p1 twice, nothing is outputted, and all the objects that were created get deleted (p1 and p2 get deleted first). 

4. Assign never appears because nothing is every assigned ; the copy constructor is used, because it is a copy assignment. The two things are seperate

5. Now the assignment constructor gives an output, but the copy constructor gives no output. This is because nothing is being copied, rather things are being assigned. 

6. Now both constructors are being called, as things are being assigned AND copied. 

7. It calls test_input_1 function, which then creates two objects and passes them to input_1 function. One of them is passed by refernece, the other by value. The one passed by value invokes the copy contructor, as a copy is being used in the function now. but passing by reference does not invoker the copy constructor, because it is being directly passed. 

8. Return value optimization is introduced in order to make return by value and pass by value more efficient. Basically, because r1 is being initialized, and another object is being return by value and stored into r1, a constructor doesnt need to be invoked because the compiler knows that r1 has already been created - it just moves the returned value into r1. 

9. for >>: 
	ostream &operator << (ostream &out, Regular_type const&a)	
	This is constant because when outputting, the object should NOT be changed. No changes sohuld be made

   for <<:
	istream &operator>> (istream &in, Regular_type  &c)
	not constant, because once you get the data you may change the object

10. Because an error was thrown, so it exits the function directly

11. Because in Resource class, when the third object is made it is hard coded to throw an error stating insufficient resources. Theoretically, 10 objects should be made, but because of the hardcoded if statement, it stops everything. It states the address of the object that was failed to create.  
